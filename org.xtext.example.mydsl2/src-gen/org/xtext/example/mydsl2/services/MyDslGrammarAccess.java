/*
 * generated by Xtext unknown
 */
package org.xtext.example.mydsl2.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDefsDefParserRuleCall_0_0 = (RuleCall)cDefsAssignment_0.eContents().get(0);
		private final Assignment cUsesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUsesUseParserRuleCall_1_0 = (RuleCall)cUsesAssignment_1.eContents().get(0);
		
		//Model:
		//    defs+=Def*
		//    uses+=Use*;
		@Override public ParserRule getRule() { return rule; }
		
		//defs+=Def*
		//uses+=Use*
		public Group getGroup() { return cGroup; }
		
		//defs+=Def*
		public Assignment getDefsAssignment_0() { return cDefsAssignment_0; }
		
		//Def
		public RuleCall getDefsDefParserRuleCall_0_0() { return cDefsDefParserRuleCall_0_0; }
		
		//uses+=Use*
		public Assignment getUsesAssignment_1() { return cUsesAssignment_1; }
		
		//Use
		public RuleCall getUsesUseParserRuleCall_1_0() { return cUsesUseParserRuleCall_1_0; }
	}
	public class DefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.Def");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Def:
		//    "def" name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"def" name=ID
		public Group getGroup() { return cGroup; }
		
		//"def"
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class UseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.Use");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefRefsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefRefsDefRefParserRuleCall_2_0 = (RuleCall)cDefRefsAssignment_2.eContents().get(0);
		
		//Use:
		//    {Use}"use" defRefs+=DefRef*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Use}"use" defRefs+=DefRef*
		public Group getGroup() { return cGroup; }
		
		//{Use}
		public Action getUseAction_0() { return cUseAction_0; }
		
		//"use"
		public Keyword getUseKeyword_1() { return cUseKeyword_1; }
		
		//defRefs+=DefRef*
		public Assignment getDefRefsAssignment_2() { return cDefRefsAssignment_2; }
		
		//DefRef
		public RuleCall getDefRefsDefRefParserRuleCall_2_0() { return cDefRefsDefRefParserRuleCall_2_0; }
	}
	public class DefRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.DefRef");
		private final Assignment cDefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cDefDefCrossReference_0 = (CrossReference)cDefAssignment.eContents().get(0);
		private final RuleCall cDefDefIDTerminalRuleCall_0_1 = (RuleCall)cDefDefCrossReference_0.eContents().get(1);
		
		//DefRef:def=[Def];
		@Override public ParserRule getRule() { return rule; }
		
		//def=[Def]
		public Assignment getDefAssignment() { return cDefAssignment; }
		
		//[Def]
		public CrossReference getDefDefCrossReference_0() { return cDefDefCrossReference_0; }
		
		//ID
		public RuleCall getDefDefIDTerminalRuleCall_0_1() { return cDefDefIDTerminalRuleCall_0_1; }
	}
	
	
	private final ModelElements pModel;
	private final DefElements pDef;
	private final UseElements pUse;
	private final DefRefElements pDefRef;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDef = new DefElements();
		this.pUse = new UseElements();
		this.pDefRef = new DefRefElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl2.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    defs+=Def*
	//    uses+=Use*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Def:
	//    "def" name=ID
	//;
	public DefElements getDefAccess() {
		return pDef;
	}
	
	public ParserRule getDefRule() {
		return getDefAccess().getRule();
	}
	
	//Use:
	//    {Use}"use" defRefs+=DefRef*
	//;
	public UseElements getUseAccess() {
		return pUse;
	}
	
	public ParserRule getUseRule() {
		return getUseAccess().getRule();
	}
	
	//DefRef:def=[Def];
	public DefRefElements getDefRefAccess() {
		return pDefRef;
	}
	
	public ParserRule getDefRefRule() {
		return getDefRefAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
